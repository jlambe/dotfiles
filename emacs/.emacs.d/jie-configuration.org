#+title: Configuration
#+author: Julien Lamb√©
#+email: julien@themosis.com
#+startup: content indent

This is my personal Emacs configuration. Feel free to explore!

Like many Emacs users, I build my configuration using "literate
programming" and I leverage the =org-babel-tangle= function to compile this
orgmode configuration into the required =.el= files.

Emacs is XDG-compatible but if the `~/.emacs.d/' directory exists, it will take
precedence over the =~/.config/emacs/= one.

* Early init
The =early-init.el= file is loaded before the package system and GUI is
initialized.

#+begin_src emacs-lisp :tangle "early-init.el"
  ;;; -*- lexical-binding: t -*-
#+end_src

* Init
The regular =init.el= file is read after the GUI is initialized.

** Setup load paths
Add the =~/.emacs.d/jie-lisp/= and =~/.emacs.d/jie-emacs/=
directories to Emacs ~load-path~. Emacs will then automatically include all the
~.el~ files.

#+begin_src emacs-lisp :tangle "init.el"
  ;;; -*- lexical-binding: t -*-

  (mapc
    (lambda (relative-path)
      (add-to-list 'load-path (locate-user-emacs-file relative-path)))
    '("jie-lisp" "jie-emacs"))
#+end_src

** Setup executable paths
I'm currently exploring Emacs on both Linux and Apple platforms. In
order to correctly work with the GUI version of Emacs, I'm using the
exec-path-from-shell package to load shell declared environment
variables and tools in the graphical application version.

My shell environment is also providing additional locations for the
environment $PATH. I'm currently sharing the neovim LSP servers
binaries with Emacs so I don't have to install them twice. In order
for Eglot to work nicely, the $PATH must have the nvim "Mason" bin
directory set.

#+begin_src emacs-lisp :tangle "init.el"
  (use-package exec-path-from-shell
    :ensure t
    :if (memq window-system '(mac ns x))
    :init (exec-path-from-shell-initialize))
#+end_src

** Repositories
Emacs has by default the following repositories enabled:
- GNU: [[https://elpa.gnu.org/packages/]]
- Non GNU: [[https://elpa.nongnu.org/nongnu/]]

The following code snippet is adding the [[https://melpa.org/][Melpa]] archive to the default
list of repositories.

#+begin_src emacs-lisp :tangle "init.el"
  (dolist (package '(("melpa" . "https://melpa.org/packages/")))
    (add-to-list 'package-archives package t))
#+end_src

** Setup quelpa
Quelpa allows the installation of Emacs packages directly from source.

#+begin_src emacs-lisp :tangle "init.el"
  (use-package quelpa
    :ensure t)
#+end_src

** Default startup buffer
When opening Emacs, display the =*scratch*= buffer by default.

#+begin_src emacs-lisp :tangle "init.el"
  (setq initial-buffer-choice t)
#+end_src

** Modifiers keys bindings
Depending on the platform used with Emacs, I need to modify some
modifier keys to work with my keyboard layouts:
- macos default ch-fr keyboard
- zsa voyager keyboard

  #+begin_src emacs-lisp :tangle "init.el"
    ;;; When working on macos, keep the right option key as the meta modifier
    ;;; and disable the left option key to work as a default alt key so I can
    ;;; special characters from my ch-fr layout.
    (when (string= system-type "darwin")
      (setq mac-right-option-modifier 'meta
    	mac-option-modifier 'none))
  #+end_src
** Auto-fill column
Set the =fill-column= variable value to =80=.

#+begin_src emacs-lisp :tangle "init.el"
  (setq fill-column 80)
#+end_src

** Backup
Disable automatic file backup.

#+begin_src emacs-lisp :tangle "init.el"
  (setq make-backup-files nil) ;; Does not create a backup file on first save
  (setq backup-inhibited t) ;; Disable backup
#+end_src

** Load
Start loading the modules.

#+begin_src emacs-lisp :tangle "init.el"
  ;; Emacs lisp functions.
  (require 'jie-lisp-orgmode)
  (require 'jie-lisp-prog)

  ;; Emacs modules and their configuration.
  (require 'jie-emacs-completion)
  (require 'jie-emacs-editor)
  (require 'jie-emacs-windows)
  (require 'jie-emacs-orgmode)
  (require 'jie-emacs-prog)
  (require 'jie-emacs-theme)
  (require 'jie-emacs-skeletons)
  (require 'jie-emacs-vc)
  (require 'jie-emacs-bindings)
#+end_src

* Lisp
** Common utilities
These are common/shared emacs-lisp functions for usage in all the configuration
files.

#+begin_src emacs-lisp :tangle "jie-lisp/jie-common.el" :mkdirp yes
  ;;; -*- lexical-binding: t -*-
#+end_src

* Modules
** Editor
The editor file contains all tiny changes for the Emacs editor that
don't fit in a specific category yet or are too small changes to
allocate them a full configuration file...

#+begin_src emacs-lisp :tangle "jie-emacs/jie-emacs-editor.el" :mkdirp yes
  ;;; -*- lexical-binding: t -*-

  (use-package emacs
    :init
    ;; Disable menu bar if on Linux GUI or terminal(need to update code here).
    (menu-bar-mode -1)

    ;; Set tab-bar-show mode to hide if there is only one tab left
    (setq tab-bar-show 1)

    ;; Navigation/View
    ;;; Set scroll-margin to 8 lines to automatically scroll before reaching the top or bottom of a window.
    (setq scroll-margin 8)

    ;; Disable tool bar
    (tool-bar-mode -1)

    ;; Default font for macos
    (when (string= system-type "darwin")
      (add-to-list 'default-frame-alist
    	       '(font . "Menlo 16")))

    ;; Tree-sitter configuration
    (setq treesit-language-source-alist
  	'(
  	  (css "https://github.com/tree-sitter/tree-sitter-css")
  	  (dockerfile "https://github.com/camdencheek/tree-sitter-dockerfile")
  	  (javascript "https://github.com/tree-sitter/tree-sitter-javascript")
  	  (php "https://github.com/tree-sitter/tree-sitter-php" "master" "php/src")
  	  (make "https://github.com/alemuller/tree-sitter-make")
  	  (typescript "https://github.com/tree-sitter/tree-sitter-typescript" "master" "typescript/src")))
    :bind
    (
     ;; C-A move the point at the beginning of line text
     ("C-S-a" . beginning-of-line-text)

     ;; C-E keybinding to scroll up by line
     ;; C-Y keybinding to scroll down by line-
     ("C-S-y" . scroll-down-line)
     ("C-S-e" . scroll-up-line))

    :hook
    (
     ;; Use relative line numbers while working on code files.
     (prog-mode . (lambda ()
  		  (setq display-line-numbers 'relative)))))

  (provide 'jie-emacs-editor)
#+end_src

** Theme
Experimenting with `ef' themes beside core `modus' themes.

#+begin_src emacs-lisp :tangle "jie-emacs/jie-emacs-theme.el" :mkdirp yes
  ;;; -*- lexical-binding: t -*-
  
  (use-package doom-themes
    :ensure t
    :config
    (setq doom-themes-enable-bold t
          doom-themes-enable-italic t)
    (load-theme 'doom-oksolar-light t))

  (provide 'jie-emacs-theme)
#+end_src

** Windows
The windmove package (windmove.el) allows a user to navigate between windows using a
cardinal direction. The below declaration is defining custom bindings
to navigate opened windows using keys on the keyboard "home" row.

#+begin_src emacs-lisp :tangle "jie-emacs/jie-emacs-windows.el"
  ;;; -*- lexical-binding: t -*-
  
  (use-package window
    :custom
    (display-buffer-alist
     '(
       ;; Display the help and xref buffers in bottom right side-window.
       ("\\*\\([Hh]elp\\|xref\\)\\*"
        (display-buffer-in-side-window)
        (window-height . 0.25)
        (side . bottom)
        (slot . 1))
       ;; Display the eldoc buffer in bottom left side-window.
       ("\\*[Ee]ldoc\\*"
        (display-buffer-in-side-window)
        (window-height . 0.25)
        (side . bottom)
        (slot . -1))))
    :bind
    ;; Toggle on/off display of side windows while pressing the F8 function key.
    ("<f8>" . window-toggle-side-windows))

  ;; C-L Move to window right
  ;; C-H Move to window left
  ;; C-J Move to window below
  ;; C-K Move to window up
  (use-package windmove
    :bind (("C-S-l" . windmove-right)
  	 ("C-S-h" . windmove-left)
  	 ("C-S-j" . windmove-down)
  	 ("C-S-k" . windmove-up)))

  (provide 'jie-emacs-windows)
#+end_src

** Org-mode
Settings regarding the org-mode.

#+begin_src emacs-lisp :tangle "jie-emacs/jie-emacs-orgmode.el"
  ;;; -*- lexical-binding: t -*-
  
  (use-package org
    :init
    ;; Setup default org-directory to be ~/Notes
    (setq org-directory "~/Notes")

    ;; Configure Org mode capture.
    (setq org-default-notes-files (concat org-directory "/inbox.org"))

    ;; Configure Org mode capture templates.
    ;; Configure the "Idea" template:
    ;; Primarily used to quick add list items in a single file.
    ;; Anything, anytime, that comes up to my mind and that I would need to revisit in the future...
    ;; Configure the "Journal" template:
    ;; Personal journal entries, ordered by day/month/year.
    (setq org-capture-templates
      '(("i" "Quicky capture an idea." item (file+headline "inbox.org" "Inbox") "")
        ;;; I would like new entries to remember to leave one line gap... except just under the headline.
        ;;; Currently, the ":empty-line-after" is adding an empty line after captured content...
        ;;; but when a new entry is appended, the last remaining empty line is ignored...
        ("j" "Personal journal entry." plain (file+datetree "journal.org") "[%U]\n%?"
         :time-prompt t
         :tree-type day
         :empty-lines-after 1)
        ("n" "Note" plain (function jie-org-capture-create-note) "")
        ))
    :hook
    ;; Enable auto-fill-mode when working within an .org file.
    ((org-mode . auto-fill-mode)))

  (provide 'jie-emacs-orgmode)
#+end_src

#+begin_src emacs-lisp :tangle "jie-lisp/jie-lisp-orgmode.el"
  ;;; -*- lexical-binding: t -*-
  
  ;; Function to handle the creation of a new note using org mode capture.
  (defun jie-org-capture-create-note ()
    "Handle creation of a new captured note."
    (call-interactively 'find-file))

  (provide 'jie-lisp-orgmode)
#+end_src

** Prog-mode
Configuration file for anything related to programmation.

#+begin_src emacs-lisp :tangle "jie-emacs/jie-emacs-prog.el"
  ;;; -*- lexical-binding: t -*-
  
  ;; Install web-mode
  (use-package web-mode
    :ensure t
    :mode
    (("\\.phtml\\'" . web-mode)))

  ;; Install php-mode
  (use-package php-mode
    :ensure t
    :hook (
         (php-mode . jie-php-mode)))


  ;; Eglot -  LSP
  ;; Intelephense for PHP
  (use-package eglot
    :config
    (add-to-list 'eglot-server-programs
                 '(php-mode . ("intelephense" "--stdio")))
    :bind
    (("C-, D" . eglot-find-declaration)
     ("C-, i" . eglot-find-implementation)
     ("C-, x" . eglot-code-actions)
     ("<f7>" . eglot-format-buffer)
     ("<f6>" . eglot-rename)))

  ;; Xref
  (use-package xref
    :bind
    (("C-, ," . xref-go-back)
     ("C-, d" . xref-find-definitions)
     ("C-, r" . xref-find-references)))

  (provide 'jie-emacs-prog)
#+end_src

#+begin_src emacs-lisp :tangle "jie-lisp/jie-lisp-prog.el"
  ;;; -*- lexical-binding: t -*-
    
  ;; php-mode init configuration function.
  (defun jie-php-mode ()
    "Personal php-mode init configuration."
    (progn
        (subword-mode 1)
        (setq-local show-trailing-whitespace 1)))

  (provide 'jie-lisp-prog)
#+end_src

** Completion
**Orderless**
The [[https://github.com/oantolin/orderless][orderless]] package provides enhanced fuzzy search during
completion. The current configuration here is putting the "orderless"
style up front.

**Vertico**
The [[https://github.com/minad/vertico][vertico]] package changes the completion UI to list found results in
a vertical list. By default, Emacs lists found terms in a multicolumn
view, which makes it harder for me to parse. I personally prefer to
view the results in a single column/list.

**Corfu**
The corfu package provides buffer completion at point UI. It can then
be used to provide code suggestions while typing code or other text
elements on major modes.

#+begin_src emacs-lisp :tangle "jie-emacs/jie-emacs-completion.el"
  ;;; -*- lexical-binding: t -*-
  
  ;;; Use the Oderless package to provide fuzzy find search style.
  (use-package orderless
    :ensure t
    :custom
    (completion-styles '(orderless basic))
    (completion-category-overrides '((file (styles basic partial-completion)))))

  ;;; Use the Vertico package to get vertical minibuffer UI.
  (use-package vertico
    :ensure t
    :custom
    (vertico-cycle t)
    (vertico-count 4)
    :init (vertico-mode))

  ;;; Use Marginalia package to add annotations on the minibuffer entries.
  (use-package marginalia
    :ensure t
    :init
    (marginalia-mode))

  ;;; Use the Corfu package for buffer completion UI
  (use-package corfu
    :ensure t
    :custom
    (corfu-cycle t)
    :init
    (global-corfu-mode)
    :config
    (add-hook 'corfu-mode-hook #'jie-init-corfu-terminal))

  ;;; Add Capfs capabilites
  (use-package cape
    :init
    (add-hook 'completion-at-point-functions #'cape-dabbrev)
    (add-hook 'completion-at-point-functions #'cape-file)
    (add-hook 'completion-at-point-functions #'cape-elisp-block))

  (use-package popon
    :ensure t)
  ;; Only enables the package if on Emacs version < 31.
  (use-package corfu-terminal
    :ensure t
    :if (< (string-to-number emacs-version) 31)
    :after '(corfu popon))

  (defun jie-init-corfu-terminal ()
    "Enable corfu terminal if Emacs version is less than 31."
    (unless (display-graphic-p)
              (corfu-terminal-mode +1)))

  (use-package emacs
    :custom
    ;; Enable indentation+completion using TAB key
    (tab-always-indent 'complete))

  (provide 'jie-emacs-completion)
#+end_src

** Skeletons
*** jie-skeleton-org-mode-code-block
Generate an orgmode code block structure where you can specify the programming
language as well as any additional headers.

#+begin_src emacs-lisp :tangle "jie-emacs/jie-emacs-skeletons.el"
  ;;; -*- lexical-binding: t -*-
  
  (define-skeleton jie-skeleton-org-mode-code-block
    "A skeleton to generate an org-mode code block structure."
    "Code language: "
    "#+begin_src " str | "emacs-lisp" " " ("Header: " str)
    \n
    -
    \n
    "#+end_src")

  (provide 'jie-emacs-skeletons)
#+end_src

** Version Control
Handle any version control client settings.

**Magit**
For managing Git projects, I use the [[https://magit.vc/][Magit]] package as it provides an
interface for managing Git workspaces that I'm used to compared to the
core VC feature of Emacs. Magit has also a larger set of tools related
to Git.

#+begin_src emacs-lisp :tangle "jie-emacs/jie-emacs-vc.el"
  ;;; -*- lexical-binding: t -*-
  
  (use-package magit
    :ensure t)

  (provide 'jie-emacs-vc)
#+end_src
