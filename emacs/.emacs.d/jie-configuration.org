#+title: Configuration
#+author: Julien Lamb√©
#+email: julien@themosis.com
#+startup: content indent

This is my personal Emacs configuration. Feel free to explore!

Like many Emacs users, I buil my configuration using "literate
programming" and I leverage the =org-babel-tangle= function to compile this
orgmode configuration into the required =.el= files.

Emacs is XDG-compatible but if the `~/.emacs.d/' directory exists, it will take
precedence over the =~/.config/emacs/= one.

* Early init
The =early-init.el= file is loaded before the package system and GUI is
initialized.

#+begin_src emacs-lisp :tangle "early-init.el"
#+end_src

* Init
The regular =init.el= file is read after the GUI is initialized.

** Setup load paths
Add the =~/.emacs.d/jie-emacs-lisp/= and =~/.emacs.d/jie-emacs-modules/=
directories to Emacs ~load-path~. Emacs will then automatically include all the
~.el~ files.

#+begin_src emacs-lisp :tangle "init.el"
  (mapc
   (lambda (relative-path)
     (add-to-list 'load-path (locate-user-emacs-file relative-path)))
   '("jie-emacs-lisp" "jie-emacs-modules"))
#+end_src

** Repositories
Emacs has by default the following repositories enabled:
- GNU: [[https://elpa.gnu.org/packages/]]
- Non GNU: [[https://elpa.nongnu.org/nongnu/]]

The following code snippet is adding the [[https://melpa.org/][Melpa]] archive to the default
list of repositories.

#+begin_src emacs-lisp :tangle "init.el"
    (dolist (package '(("melpa" . "https://melpa.org/packages/")))
      (add-to-list 'package-archives package t))
#+end_src
** Default startup buffer
When opening Emacs, display the =*scratch*= buffer by default.

#+begin_src emacs-lisp :tangle "init.el"
  (setq initial-buffer-choice t)
#+end_src

** Auto-fill column
Set the =fill-column= variable value to =80=.

#+begin_src emacs-lisp :tangle "init.el"
  (setq fill-column 80)
#+end_src

** Load
Start loading the modules.

#+begin_src emacs-lisp :tangle "init.el"
  (require 'jie-emacs-completion)
  (require 'jie-emacs-editor)
  (require 'jie-emacs-orgmode)
  (require 'jie-emacs-prog)
  (require 'jie-emacs-theme)
  (require 'jie-emacs-skeletons)
#+end_src

* Lisp
** Common utilities
These are common/shared emacs-lisp functions for usage in all the configuration
files.

#+begin_src emacs-lisp :tangle "jie-emacs-lisp/jie-common.el" :mkdirp yes
#+end_src

* Modules
** Editor
The editor file contains all tiny changes for the Emacs editor that
don't fit in a specific category yet or are too small changes to
allocate them a full configuration file...

#+begin_src emacs-lisp :tangle "jie-emacs-modules/jie-emacs-editor.el" :mkdirp yes
  ;;; Set tab-bar-show mode to hide if there is only one tab left
  (setq tab-bar-show 1)

  ;;; Navigation/View
  ;;;; Set scroll-margin to 8 lines to automatically scroll before reaching the top or bottom of a window.
  (setq scroll-margin 8)
  
  (provide 'jie-emacs-editor)
#+end_src

** Theme
Experimenting with `ef' themes beside core `modus' themes.

#+begin_src emacs-lisp :tangle "jie-emacs-modules/jie-emacs-theme.el" :mkdirp yes
  (require 'ef-themes)
  (load-theme 'ef-light :no-confirm)

  (provide 'jie-emacs-theme)
#+end_src

** Org-mode
Settings regarding the org-mode.

#+begin_src emacs-lisp :tangle "jie-emacs-modules/jie-emacs-orgmode.el"
  ;;; Enable auto-fill-mode when working within an .org file.
  (add-hook 'org-mode-hook 'auto-fill-mode)
  
  (provide 'jie-emacs-orgmode)
#+end_src

** Prog-mode
Configuration file for anything related to programmation.

#+begin_src emacs-lisp :tangle "jie-emacs-modules/jie-emacs-prog.el"
  ;;; Use relative line numbers while working on code files.
  (add-hook 'prog-mode-hook
            (lambda ()
              (setq display-line-numbers 'relative)))

  ;;; Modes
  ;;;; Install php-mode
  (defun jie-php-mode ()
    "Personal php-mode init configuration."
    (progn
      (subword-mode 1)
      (setq-local show-trailing-whitespace 1)))

  (use-package php-mode
    :ensure t
    :config
    (add-hook 'php-mode-hook #'jie-php-mode)
    (add-hook 'hack-local-variables-hook 'php-ide-turn-on nil 1))

  (provide 'jie-emacs-prog)
#+end_src

** Completion
**Orderless**
The [[https://github.com/oantolin/orderless][orderless]] package provides enhanced fuzzy search during
completion. The current configuration here is putting the "orderless"
style up front.

**Vertico**
The [[https://github.com/minad/vertico][vertico]] package changes the completion UI to list found results in
a vertical list. By default, Emacs lists found terms in a multicolumn
view, which makes it harder for me to parse. I personally prefer to
view the results in a single column/list.

**Corfu**
The corfu package provides buffer completion at point UI. It can then
be used to provide code suggestions while typing code or other text
elements on major modes.

#+begin_src emacs-lisp :tangle "jie-emacs-modules/jie-emacs-completion.el"
    ;;; Use the Oderless package to provide fuzzy find search style.
    (use-package orderless
      :ensure t
      :custom (completion-styles '(orderless basic)))

    ;;; Use the Vertico package to get vertical minibuffer UI.
    (use-package vertico
      :ensure t
      :custom
      (vertico-cycle t)
      (vertico-count 4)
      :init (vertico-mode))

    ;;; Use the Corfu package for buffer completion UI
    (use-package corfu
      :ensure t
      :custom
      (corfu-cycle t)
      :init
      (global-corfu-mode))

    (use-package emacs
      :custom
      ;; Enable indentation+completion using TAB key
      (tab-always-indent 'complete))
    
    (provide 'jie-emacs-completion)
#+end_src

** Skeletons
*** jie-skeleton-org-mode-code-block
Generate an orgmode code block structure where you can specify the programming
language as well as any additional headers.

#+begin_src emacs-lisp :tangle "jie-emacs-modules/jie-emacs-skeletons.el"
  (define-skeleton jie-skeleton-org-mode-code-block
    "A skeleton to generate an org-mode code block structure."
    "Code language: "
    "#+begin_src " str | "emacs-lisp" " " ("Header: " str)
    \n
    -
    \n
    "#+end_src")

  (provide 'jie-emacs-skeletons)
#+end_src
